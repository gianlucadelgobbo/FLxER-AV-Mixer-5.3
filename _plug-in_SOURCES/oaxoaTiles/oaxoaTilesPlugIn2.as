package {	import flash.display.Sprite;	import flash.display.Shape;	import flash.net.*;	import flash.events.*;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.geom.Matrix;	public class oaxoaTilesPlugIn2 extends Sprite {		var drawer_lc_receive;		var sw:Number;		var sh:Number;		var tiles:uint;		var vw:Number;		var vh:Number;		var bdata:BitmapData		var bitmap:Bitmap		var video:Sprite		var trgt:Sprite;		var cntTrgt:Array;		var cntEnterFrame;		var oaxoa_lc_plugin_send:LocalConnection		var oaxoa_lc_plugin_receive:LocalConnection		var chNum;		public function oaxoaTilesPlugIn2() {						sw=Plugin.getMonWidth();			sh=Plugin.getMonHeight();			chNum = Plugin.getChannelsNum();			cntTrgt = new Array();			for (var a:uint=0;a<chNum;a++) {				cntTrgt[a] = new Object();			}			cntEnterFrame = Plugin.getChannel(0);						oaxoa_lc_plugin_receive = new LocalConnection();			oaxoa_lc_plugin_receive.client = this;            try {				oaxoa_lc_plugin_receive.connect("oaxoa_lc_plugin");            } catch (error:ArgumentError) {                trace("Can't connect...the connection name is already being used by another SWF");            }			oaxoa_lc_plugin_send = new LocalConnection();			oaxoa_lc_plugin_send.send("oaxoa_lc_controller", "setChannelsNum", chNum);		}		public function setTiles(t,ch):void {			if (t>1) {				trace("cazzo0")				if (!cntTrgt[ch].trgt) {					trace("cazzo1")					cntTrgt[ch].video=Plugin.getMovie(ch);					cntTrgt[ch].trgt = Plugin.getMovieCnt(ch)					cntTrgt[ch].video.visible=false;					cntTrgt[ch].bdata=new BitmapData(sw,sh,true,0x00000000);					cntTrgt[ch].bitmap=new Bitmap(cntTrgt[ch].bdata);					cntTrgt[ch].trgt.addChild(cntTrgt[ch].bitmap);				}				trace("cazzo2")				cntTrgt[ch].tiles = t;				cntTrgt[ch].vw=sw/cntTrgt[ch].tiles;				cntTrgt[ch].vh=sh/cntTrgt[ch].tiles;			} else if (cntTrgt[ch].trgt) {				cntTrgt[ch].video.visible=true;				cntTrgt[ch].trgt.removeChild(cntTrgt[ch].bitmap);				cntTrgt[ch] = new Object();			}			var isActive = false;			for (var item in cntTrgt) {				if (cntTrgt[item].trgt) isActive = true;			}			//			//video.scaleX=video.scaleY = 1/tiles;			// calculate the size of a single tile			// start			if (!cntEnterFrame.hasEventListener(Event.ENTER_FRAME) && isActive) {				trace("addEventListener")				cntEnterFrame.addEventListener(Event.ENTER_FRAME, onframe);			} else if (!isActive && cntEnterFrame.hasEventListener(Event.ENTER_FRAME)){				trace("removeEventListener")				cntEnterFrame.removeEventListener(Event.ENTER_FRAME, onframe);			}		}		function onframe(event:Event):void {			for (var item in cntTrgt) {				if (cntTrgt[item].trgt) {					cntTrgt[item].bdata.fillRect(new flash.geom.Rectangle(0,0,sw,sh), 0x00000000);					for (var i:uint=0; i<cntTrgt[item].tiles; i++) {						for (var j:uint=0; j<cntTrgt[item].tiles; j++) {							var matrix:Matrix=new Matrix();							matrix.scale(1/cntTrgt[item].tiles, 1/cntTrgt[item].tiles);							matrix.translate((j*cntTrgt[item].vw)+((cntTrgt[item].vw)/2), (i*cntTrgt[item].vh)+((cntTrgt[item].vh)/2));							cntTrgt[item].bdata.draw(cntTrgt[item].video, matrix);						}					}				}			}		}	}}